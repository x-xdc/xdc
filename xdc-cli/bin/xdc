#!/usr/bin/env node
'use strict'

const path = require('path')
const program = require('commander')
const PATH = require('../util/path')
const check = require('../util/check')
const config = require('../util/config')
const logger = require('../util/logger')
const chalk = require('chalk')

console.log()
process.on('exit', () => console.log())

check.initPluginPackage()
config.init()

try {
  check.checkPermission()
} catch(_) {
  logger.fatal(`chalk.yellow('permission denied')
    尝试使用 ${chalk.cyan('sudo')} 或者执行下面指令修改访问权限

    ${chalk.cyan('sudo chown -R $USER:$(id -gn $USER) ' + PATH.PLUGIN_PATH)}
  `)
}

if (config.get('updateCheck')) {
  check.checkVersion()
}

// hack
// https://gist.github.com/branneman/8048520#6-the-hack
process.env['NODE_PATH'] = (process.env['NODE_PATH'] || '') + [
    '',
    path.join(PATH.CWD_PATH, 'node_modules'),
    PATH.LIB_PATH,
    path.join(PATH.ROOT_PATH, 'node_modules'),
    path.join(PATH.PLUGIN_PATH, 'node_modules'),
  ].join(path.delimiter)

require('module').Module._initPaths()

// initPath
process.env.xdc_PATH = [
  'node_modules',
  path.join(PATH.CWD_PATH, 'node_modules'),
  path.join(PATH.PLUGIN_PATH, 'node_modules'),
  path.join(PATH.ROOT_PATH, 'node_modules')
].join(',')

program
  .usage('<command> [options]')
  .version(require('../package.json').version)
  .command('config <option>', '查看当前项目的配置信息')
  .command('init <template>', '初始化一个空项目，例如 vue')
  .command('create <project-name> <template>', '创建一个空项目文件夹并初始化')
  .command('import <plugin>', '安装插件/脚手架')
  .command('update <plugin>', '更新插件/脚手架')
  .command('remove <plugin>', '卸载插件/脚手架')
  .command('list', '查看已安装的插件/脚手架')
  .command('watch', '开发模式 development')
  .command('build', '生产模式 production')

// 加载动态指令
require('../util/load-command')(program)
program.parse(process.argv)

if (!process.argv.slice(2).length) {
  program.outputHelp()
}
